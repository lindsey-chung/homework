"(37.7907890558203,-122.402273431333)",
"(37.7111991003088,-122.394693339395)",
"(37.7773000262759,-122.394812784799)",
NA
)
str_replace_all(locs, pattern = "\\(|\\)", replacement = '')
lat_lon = str_replace_all(locs, pattern = "\\(|\\)", replacement = '') %>% str_split(pattern = ',')
lat_lon
lat = lapply(lat_lon, function(x) x[1])
lat
lat = as.numeric(unlist(lapply(lat_lon, function(x) x[1])))
lat = as.numeric(unlist(lapply(lat_lon, function(x) x[1])))
lon = = as.numeric(unlist(lapply(lat_lon, function(x) x[2])))
lon = as.numeric(unlist(lapply(lat_lon, function(x) x[2])))
lon
lat
lat_long = str_replace_all(dat$Location, pattern = '\\(|\\)', replacement = '') %>%
str_split(pattern = ',')
dat$lat = as.numeric(unlist(lapply(lat_long, function(x) x[1])))
dat$lon = as.numeric(unlist(lapply(lat_long, function(x) x[2])))
plot_ly(data = dat, x = ~lon, y = ~lat, type = 'scatter', mode = 'markers')
install.packages(RgoogleMaps)
install.packages('RgoogleMaps')
library(RgoogleMaps)
center <- c(mean(dat$lat, na.rm = TRUE), mean(dat$lon, na.rm = TRUE))
center <- c(mean(dat$lat, na.rm = TRUE), mean(dat$lon, na.rm = TRUE))
zoom <- min(MaxZoom(range(dat$lat, na.rm = TRUE),
range(dat$lon, na.rm = TRUE)))
map1 <- GetMap(center=center, zoom=zoom, destfile = "san-francisco.png")
PlotOnStaticMap(map1, dat$lat, dat$lon, col = "#ed4964", pch=20)
install.packages(ggmap)
install.packages('ggmap')
library(ggmap)
dat$lat = latitude
dat = na.omit(dat)
sbbox = make_bbox(lon = dat$lon, lat = dat$lat, f = 0.1)
sbbox
sf_map = get_map(locatio = sbbox, maptype = 'terrain', source = 'google')
ggmap(sf_map) +
gemp_point(data = dat,
mapping = aes(x = lon, y = lat),
color = 'red', alpha = 0.2, size = 1)
library(ggmap)
devtools::install_github("hadley/ggplot2@v2.2.0")
install.packages(devtools)
install.packages('devtools')
library(devtools)
devtools::install_github("hadley/ggplot2@v2.2.0")
devtools::install_github("dkahle/ggmap")
dat = na.omit(dat)
sbbox = make_bbox(lon = dat$lon, lat = dat$lat, f = 0.1)
?make_bbox
foods = dat$optionaltext[1:10]
str_detect(foods, pattern = 'Burritos|burritos')
str_detect(foods, pattern = 'tacos')
str_detect(foods, pattern = 'tacos')
str_detect(foods, pattern = 'Tacos')
burritos = filter(dat, str_detect(dat, pattern = 'Burritos|burritos'))
which_burritos = str_detect(dat$optionaltext, pattern = 'Burritos|burritos') == TRUE
which_burritos
detect_burritos = str_detect(dat$optionaltext, pattern = 'Burritos|burritos')
which_burritos = detect_burritos == TRUE
which_burritos
burritos = dat[detect_burritos]
burritos = filter(dat, detect_burritos)
burritos
ggmap(sf_map) +
geom_point(data = burritos,
mapping = aes(x = lon, y = lat)
color = 'red', alpha = 0.2, size = 1)
ggmap(sf_map) +
geom_point(data = burritos,
mapping = aes(x = lon, y = lat),
color = 'red', alpha = 0.2, size = 1)
ggmap(sf_map) +
gemp_point(data = dat,
mapping = aes(x = lon, y = lat),
color = 'red', alpha = 0.2, size = 1)
library(ggmap)
center <- c(mean(dat$lat, na.rm = TRUE), mean(dat$lon, na.rm = TRUE))
zoom <- min(MaxZoom(range(dat$lat, na.rm = TRUE),
range(dat$lon, na.rm = TRUE)))
map1 <- GetMap(center=center, zoom=zoom, destfile = "san-francisco.png")
PlotOnStaticMap(map1, dat$lat, dat$lon, col = "#ed4964", pch=20)
# with ggmap
dat = na.omit(dat)
sbbox = make_bbox(lon = dat$lon, lat = dat$lat, f = 0.1)
library(dplyr)
library(stringr)
library(plotly)
library(RgoogleMaps)
library(ggmap)
install.packages('ggmap')
library(ggmap)
shiny::runApp('~/test')
runApp('~/test')
runApp('~/test')
runApp('~/test')
runApp('~/test')
runApp('~/test')
install.packages("XML")
install.packages("XML")
knitr::opts_chunk$set(echo = TRUE)
library(XML)
read_archive = function (x) {
readHTMLTable(paste0('http://cran.r-project.org/src/contrib/Archive/', x))
}
raw_data = read_archive('stringr')
raw_data
View(raw_data)
raw_data[["NULL"]][["Last modified"]]
raw_data[name]
raw_data[Name]
raw_data$Name
raw_data[ , 1]
is.data.frame(raw_data)
is.list(raw_data)
as.data.frame(raw_data)
View(raw_data)
raw_data[,1]
raw_data[ ,1]
dim(raw_data)
raw_data = read_archive('stringr')
raw_data
is.data.frame(raw_data[2])
is.data.frame(raw_data)
as.data.frame(raw_data)
raw_data$NULL.Name
raw_data$NULL
is.data.frame(raw_data)
as.data.frame(raw_data)
raw_data = as.data.frame(raw_data)
?data_frame
raw_data = as.data.frame(raw_data, row.names = c('name', 'version', 'date', 'size'))
raw_data = as.data.frame(raw_data, column.names = c('name', 'version', 'date', 'size'))
raw_data
raw_data = read_archive('stringr')
raw_data
name = function (x) {
str_sub(x, pattern = \\w+)
}
name = function (x) {
str_sub(x, pattern = '\\w+')
}
name(raw_data)
library(stringr)
name(raw_data)
?str_sub
?str_extract
name = function (x) {
str_extract(x, pattern = '\\w+')
}
name(raw_data)
name = function (x) {
str_extract(x[1], pattern = '\\w+')
}
name(raw_data)
name = function (x) {
str_extract(x[[1]], pattern = '\\w+')
}
name(raw_data)
name = function (x) {
str_extract(x[[2]], pattern = '\\w+')
}
name(raw_data)
name = function (x) {
str_extract(x[[1]], pattern = '\\w+')
}
name(raw_data)
raw_data[[1]]
raw_data[[1,1]]
raw_data[[1]]
class(raw_data)
name = function (x) {
str_extract(x[[1]][ , 1], pattern = '\\w+')
}
name(raw_data)
name = function (x) {
str_extract(x[[1]][ , 1], pattern = '\\w')
}
name(raw_data)
name = function (x) {
str_extract(x[[1]][ , 1], pattern = 's')
}
name(raw_data)
read_archive = function (x) {
readHTMLTable(paste0('http://cran.r-project.org/src/contrib/Archive/', x), stringsAsFactors = FALSE)
}
raw_data = read_archive('stringr')
raw_data
name = function (x) {
str_extract(x[[1]][ , 1], pattern = '\\w+')
}
name(raw_data)
View(raw_data)
str(raw_data[[1]])
raw_data[[1]][,1]
name = function (x) {
str_extract(x[[1]][ , 2], pattern = '\\w+')
}
name(r)
name(raw_data)
name = function (x) {
str_extract(x[[1]][ , 2], pattern = '[a-z]+')
}
name(raw_data)
name = function (x) {
str_extract(x[[1]][ , 2], pattern = '[a-z]+')[3--2]
}
name(raw_data)
get_name = function (x) {
name = str_extract(x[[1]][ , 2], pattern = '[a-z]+')
name = name[3:-2]
return(name)
}
get_name(raw_data)
get_name = function (x) {
name = str_extract(x[[1]][ , 2], pattern = '[a-z]+')
name = name[3:length(name) - 1]
return(name)
}
get_name(raw_data)
get_name = function (x) {
name = str_extract(x[[1]][ , 2], pattern = '[a-z]+')
name = name[4:length(name) - 1]
return(name)
}
get_name(raw_data)
raw_data
names(raw_data)
names(raw_data[[1]])
get_version = function (x) {
version = str_extract(x[[1]][ , 2], pattern = '[0-9](\\.[0-9])+')
}
get_version(raw_data)
version
get_version = function (x) {
version = str_extract(x[[1]][ , 2], pattern = '[0-9](\\.[0-9])+')
return(version)
}
get_version(raw_data)
get_version = function (x) {
version = str_extract(x[[1]][ , 2], pattern = '[0-9](\\.[0-9])+')
version = version[4:length(version) - 1]
return(version)
}
get_version(raw_data)
get_version = function (x) {
version = str_extract(x[[1]][ , 2], pattern = '[0-9](\\.[0-9]+)+')
version = version[4:length(version) - 1]
return(version)
}
get_version(raw_data)
get_date = function (x) {
date = str_sub(x[[1]][ , 3], start = 1, end = 10)
date = date[4:length(date) - 1]
return(date)
}
get_date(raw_data)
get_size = function (x) {
which_mb = str_detect(x[[1]][ , 4], pattern = 'M')
size = str_extract(x[[1]][ , 4], pattern = '[0-9]+\\.[0-9]+')
size[which_mb] = as.numeric(str_extract(x[[1]][ , 4], pattern = '[0-9]+\\.[0-9]+')) * 1000
return(size)
}
get_size(raw_data)
get_size = function (x) {
which_mb = str_detect(x[[1]][ , 4], pattern = 'M')
which_mb = which_mb[4:length(which_mb) - 1]
size = str_extract(x[[1]][ , 4], pattern = '[0-9]+\\.[0-9]+')
size = size[4:length(size) - 1]
size[which_mb] = as.numeric(str_extract(x[[1]][ , 4], pattern = '[0-9]+\\.[0-9]+')) * 1000
return(size)
}
get_size(raw_data)
get_size = function (x) {
which_mb = str_detect(x[[1]][ , 4], pattern = 'M')
which_mb = which_mb[4:length(which_mb) - 1]
size = paste0(str_extract(x[[1]][ , 4], pattern = '[0-9]+'), str_extract(x[[1]][ , 4], pattern = '\\.[0-9]+')
size = size[4:length(size) - 1]
size[which_mb] = as.numeric(str_extract(x[[1]][ , 4], pattern = '[0-9]+\\.[0-9]+')) * 1000
return(size)
}
get_size = function (x) {
which_mb = str_detect(x[[1]][ , 4], pattern = 'M')
which_mb = which_mb[4:length(which_mb) - 1]
size = paste0(str_extract(x[[1]][ , 4], pattern = '[0-9]+'), str_extract(x[[1]][ , 4], pattern = '\\.[0-9]+'))
size = size[4:length(size) - 1]
size[which_mb] = as.numeric(str_extract(x[[1]][ , 4], pattern = '[0-9]+\\.[0-9]+')) * 1000
return(size)
}
get_size(raw_data)
get_size = function (x) {
which_mb = str_detect(x[[1]][ , 4], pattern = 'M')
which_mb = which_mb[4:length(which_mb) - 1]
which_decimal = str_detect(x[[1]][ , 4], pattern = '\\.')
which_decimal = which_decimal[4:length(which_decimal) - 1]
size = str_extract(x[[1]][ , 4], pattern = '[0-9]+')
size[which_decimal] = str_extract(x[[1]][ , 4], pattern = '[0-9]+\\.[0-9]+'))
size = size[4:length(size) - 1]
size[which_mb] = as.numeric(str_extract(x[[1]][ , 4], pattern = '[0-9]+\\.[0-9]+')) * 1000
return(size)
}
get_size = function (x) {
#which_mb = str_detect(x[[1]][ , 4], pattern = 'M')
#which_mb = which_mb[4:length(which_mb) - 1]
which_decimal = str_detect(x[[1]][ , 4], pattern = '\\.')
which_decimal = which_decimal[4:length(which_decimal) - 1]
size = str_extract(x[[1]][ , 4], pattern = '[0-9]+')
size = size[4:length(size) - 1]
size[which_decimal] = str_extract(x[[1]][ , 4], pattern = '[0-9]+\\.[0-9]+')
#size[which_mb] = as.numeric(str_extract(x[[1]][ , 4], pattern = '[0-9]+\\.[0-9]+')) * 1000
return(size)
}
get_size(raw_data)
which_decimal = str_detect(raw_data[[1]][ , 4], pattern = '\\.')
which_decimal
which_decimal[4:length(which_decimal) - 1]
get_size = function (x) {
#which_mb = str_detect(x[[1]][ , 4], pattern = 'M')
#which_mb = which_mb[4:length(which_mb) - 1]
which_decimal = str_detect(x[[1]][ , 4], pattern = '\\.')
size = str_extract(x[[1]][ , 4], pattern = '[0-9]+')
size[which_decimal] = str_extract(x[[1]][ , 4], pattern = '[0-9]+\\.[0-9]+')
#size[which_mb] = as.numeric(str_extract(x[[1]][ , 4], pattern = '[0-9]+\\.[0-9]+')) * 1000
return(size)
}
get_size(raw_data)
get_size = function (x) {
#which_mb = str_detect(x[[1]][ , 4], pattern = 'M')
#which_mb = which_mb[4:length(which_mb) - 1]
which_decimal = str_detect(x[[1]][ , 4], pattern = '\\.')
which_decimal = which_decimal[4:length(which_decimal) - 1]
size = str_extract(x[[1]][ , 4], pattern = '[0-9]+')
size = size[4:length(size) - 1]
size[which_decimal] = str_extract(x[[1]][ , 4], pattern = '[0-9]+\\.[0-9]+')
#size[which_mb] = as.numeric(str_extract(x[[1]][ , 4], pattern = '[0-9]+\\.[0-9]+')) * 1000
return(size)
}
get_size(raw_data)
get_size = function (x) {
#which_mb = str_detect(x[[1]][ , 4], pattern = 'M')
#which_mb = which_mb[4:length(which_mb) - 1]
which_decimal = str_detect(x[[1]][ , 4], pattern = '\\.')
which_decimal = which_decimal[4:length(which_decimal) - 1]
size = str_extract(x[[1]][ , 4], pattern = '[0-9]+')
size = size[4:length(size) - 1]
size[which_decimal] = str_extract(x[[1]][ , 4], pattern = '[0-9]+\\.[0-9]+')[4:length(size) + 2]
#size[which_mb] = as.numeric(str_extract(x[[1]][ , 4], pattern = '[0-9]+\\.[0-9]+')) * 1000
return(size)
}
get_size(raw_data)
get_size = function (x) {
#which_mb = str_detect(x[[1]][ , 4], pattern = 'M')
#which_mb = which_mb[4:length(which_mb) - 1]
which_decimal = str_detect(x[[1]][ , 4], pattern = '\\.')
which_decimal = which_decimal[4:length(which_decimal) - 1]
size = str_extract(x[[1]][ , 4], pattern = '[0-9]+')
size = size[4:length(size) - 1]
size[which_decimal] = str_extract(x[[1]][ , 4], pattern = '[0-9]+\\.[0-9]+')[4:length(size) + 3]
#size[which_mb] = as.numeric(str_extract(x[[1]][ , 4], pattern = '[0-9]+\\.[0-9]+')) * 1000
return(size)
}
get_size(raw_data)
get_size = function (x) {
#which_mb = str_detect(x[[1]][ , 4], pattern = 'M')
#which_mb = which_mb[4:length(which_mb) - 1]
which_decimal = str_detect(x[[1]][ , 4], pattern = '\\.')
which_decimal = which_decimal[4:length(which_decimal) - 1]
size = paste0(str_extract(x[[1]][ , 4], pattern = '[0-9]+'), '.0')
size = size[4:length(size) - 1]
size[which_decimal] = str_extract(x[[1]][ , 4], pattern = '[0-9]+\\.[0-9]+')[4:length(size) + 2]
#size[which_mb] = as.numeric(str_extract(x[[1]][ , 4], pattern = '[0-9]+\\.[0-9]+')) * 1000
return(size)
}
get_size(raw_data)
which_decimal = str_detect(raw_data[[1]][ , 4], pattern = '\\.')
which_decimal = which_decimal[4:length(which_decimal) - 1]
which_decimal
get_size = function (x) {
#which_mb = str_detect(x[[1]][ , 4], pattern = 'M')
#which_mb = which_mb[4:length(which_mb) - 1]
which_decimal = str_detect(x[[1]][ , 4], pattern = '\\.')
which_decimal = which_decimal[4:length(which_decimal) - 1]
size_decimal = str_extract(x[[1]][ , 4], pattern = '[0-9]+\\.[0-9]+')
size_decimal = size_decimal[4:length(size_decimal) - 1]
size = paste0(str_extract(x[[1]][ , 4], pattern = '[0-9]+'), '.0')
size = size[4:length(size) - 1]
size[which_decimal] = size_decimal
#size[which_mb] = as.numeric(str_extract(x[[1]][ , 4], pattern = '[0-9]+\\.[0-9]+')) * 1000
return(size)
}
which_decimal
get_size(raw_data)
length(size)
get_size = function (x) {
#which_mb = str_detect(x[[1]][ , 4], pattern = 'M')
#which_mb = which_mb[4:length(which_mb) - 1]
which_decimal = str_detect(x[[1]][ , 4], pattern = '\\.')
which_decimal = which_decimal[4:length(which_decimal) - 1]
size_decimal = str_extract(x[[1]][ , 4], pattern = '[0-9]+\\.[0-9]+')
size_decimal = size_decimal[4:length(size_decimal) - 1]
size = paste0(str_extract(x[[1]][ , 4], pattern = '[0-9]+'), '.0')
size = size[4:length(size) - 1]
size[which_decimal] = size_decimal[which_decimal]
#size[which_mb] = as.numeric(str_extract(x[[1]][ , 4], pattern = '[0-9]+\\.[0-9]+')) * 1000
return(size)
}
get_size(raw_data)
get_size = function (x) {
which_mb = str_detect(x[[1]][ , 4], pattern = 'M')
which_mb = which_mb[4:length(which_mb) - 1]
size_mb = 1000 * as.numeric(str_extract(x[[1]][ , 4], pattern = '[0-9]+\\.[0-9]+'))
size_mb = size_mb[4:length(size_mb) - 1]
which_decimal = str_detect(x[[1]][ , 4], pattern = '\\.')
which_decimal = which_decimal[4:length(which_decimal) - 1]
size_decimal = str_extract(x[[1]][ , 4], pattern = '[0-9]+\\.[0-9]+')
size_decimal = size_decimal[4:length(size_decimal) - 1]
size = paste0(str_extract(x[[1]][ , 4], pattern = '[0-9]+'), '.0')
size = size[4:length(size) - 1]
size[which_decimal] = size_decimal[which_decimal]
size[which_mb] = size_mb[which_mb]
return(size)
}
get_size(raw_data)
?date
date(get_date(raw_data))
get_date(raw_data)
as.Date(get_date(raw_data))
is.date(as.Date(get_date(raw_data)))
library(dplyr)
library(stringr)
library(plotly)
library(RgoogleMaps)
library(ggmap)
install.packages('ggmap')
library(ggmap)
install.packages('ggplot2')
library(ggmap)
center <- c(mean(dat$lat, na.rm = TRUE), mean(dat$lon, na.rm = TRUE))
zoom <- min(MaxZoom(range(dat$lat, na.rm = TRUE),
range(dat$lon, na.rm = TRUE)))
map1 <- GetMap(center=center, zoom=zoom, destfile = "san-francisco.png")
PlotOnStaticMap(map1, dat$lat, dat$lon, col = "#ed4964", pch=20)
# with ggmap
dat = na.omit(dat)
sbbox = make_bbox(lon = dat$lon, lat = dat$lat, f = 0.1)
sbbox
sf_map = get_map(locatio = sbbox, maptype = 'terrain', source = 'google')
ggmap(sf_map) +
gemp_point(data = dat,
mapping = aes(x = lon, y = lat),
color = 'red', alpha = 0.2, size = 1)
install.packages('ggproto')
devtools::install_github("hadley/ggplot2@v2.2.1")
devtools::install_github("dkahle/ggmap")
clean_archive = function (x) {
name = get_name(x)
version = get_version(x)
date = as.Date(get_date(x))
size = as.numeric(get_size(x))
}
setwd("~/Desktop/hw-stat133/homework/hw04/report")
clean_archive = function (x) {
name = get_name(x)
version = get_version(x)
date = as.Date(get_date(x))
size = as.numeric(get_size(x))
}
clean_archive = function (x) {
name = get_name(x)
version = get_version(x)
date = as.Date(get_date(x))
size = as.numeric(get_size(x))
cbind(name, version, date, size)
}
clean_archive(raw_data)
as.numeric(get_size(raw_data))
ggmap(sf_map) +
gemp_point(data = dat,
mapping = aes(x = lon, y = lat),
color = 'red', alpha = 0.2, size = 1)
?round
?trunc
get_size = function (x) {
which_mb = str_detect(x[[1]][ , 4], pattern = 'M')
which_mb = which_mb[4:length(which_mb) - 1]
size_mb = 1000 * as.numeric(str_extract(x[[1]][ , 4], pattern = '[0-9]+\\.[0-9]+'))
size_mb = size_mb[4:length(size_mb) - 1]
which_decimal = str_detect(x[[1]][ , 4], pattern = '\\.')
which_decimal = which_decimal[4:length(which_decimal) - 1]
size_decimal = str_extract(x[[1]][ , 4], pattern = '[0-9]+\\.[0-9]+')
size_decimal = size_decimal[4:length(size_decimal) - 1]
size = str_extract(x[[1]][ , 4], pattern = '[0-9]+')
size = size[4:length(size) - 1]
size[which_decimal] = size_decimal[which_decimal]
size[which_mb] = size_mb[which_mb]
size = as.numeric(size)
size = round(size, 3)
return(size)
}
get_size(raw_data)
clean_archive = function (x) {
name = get_name(x)
version = get_version(x)
date = as.Date(get_date(x))
size = get_size(x)
cbind(name, version, date, size)
}
clean_archive(raw_data)
get_size(raw_data)
??date data type
