is_probability(1)
#' @title Probability Test
#' @description tests if the input is a valid probability value
#' @param x
#' @return TRUE or FALSE
is_probability = function(x) {
if (x <= 1 & x >= 0) {
return(TRUE)
} else {
return(FALSE)
}
}
is_probability(0)
is_probability(-1)
is_probability(1.00001)
#' @title Factorial
#' @description finds the factorial of the input
#' @param x, a non-negative integer
#' @return the factorial
fact = 1
bin_factorial = function(x) {
if (x = 0) {
return(1)
} else {
for (i in 1:x) {
fact = fact * i
}
return(fact)
}
}
#' @title Factorial
#' @description finds the factorial of the input
#' @param x, a non-negative integer
#' @return the factorial
fact = 1
bin_factorial = function(x) {
if (x == 0) {
return(1)
} else {
for (i in 1:x) {
fact = fact * i
}
return(fact)
}
}
bin_factorial(0)
bin_factorial(5)
#' @title Combinations
#' @description funds the number of combinations of k successes in n trials
#' @param n, k
#' @return the number of combinations
bin_combinations = function(n, k) {
bin_factorial(n) / (bin_factorial(k) * bin_factorial(n-k))
}
bin_combinations(n = 5, k = 2)
bin_combinations(10, 3)
bin_combinations(4, 4,)
bin_combinations(4, 4)
#' @title Probability
#' @description finds the probability of getting a certain number
#'              of successes in a number of trials
#' @param trials, success, prob
#' @return probability
bin_probability = function(trials, success, prob) {
if (is_nonneg_integer(trials) == FALSE) {
stop('number of trials must be a non-negative integer')
} else if (is_nonneg_integer(success) == FALSE) {
stop('number of successes must be a non-negative integer')
} else if (is_probability(prob) == FALSE) {
stop('probability must be a value in [0, 1]')
} else {
bin_combinations(trials, success) * prob^success * (1 - prob)^(trials - success)
}
}
bin_probability(trials = 5, success = 2, prob = 0.5)
bin_probability(3, 4, 0.5)
bin_probability(-3, 4, 0.5)
bin_probability(3, 2.4, 0.5)
bin_probability(3, 2, 1)
bin_probability(3, 2, 1.2)
bin_probability(3, 2, 0.8)
bin_probability(3, 2, 0.5)
bin_probability(3, 2, 0.9)
bin_probability(3, 2, 0.9999)
bin_probability(3, 2, 1)
bin_probability(3, 2, 0.8)
bin_probability(3, 2, 0.5)
bin_probability(3, 2, 0.4)
bin_probability(3, 2, 0.3)
bin_probability(3, 2, 0.85)
bin_probability(3, 2, 0.9)
#' @title Factorial
#' @description finds the factorial of the input
#' @param x, a non-negative integer
#' @return the factorial
bin_factorial = function(x) {
if (x == 0) {
return(1)
} else {
fact = 1
for (i in 1:x) {
fact = fact * i
}
return(fact)
}
}
bin_factorial(5)
#' @title Distribution
#' @description shows the probabilities of different numbers of successes
#' @param trials, prob
#' @return a data frame of numbers of successes and their probabilities
distribution = data.frame(nrow )
bin_distribution = function(trials, prob) {
success = c(0:(trials-1))
probability = rep(0, trials)
for (i in 1:trials) {
probability[i] = bin_probability(trials, i-1, prob)
}
cbind(success, probability)
}
bin_distribution(trials = 5, prob = 0.5)
#' @description shows the probabilities of different numbers of successes
#' @param trials, prob
#' @return a data frame of numbers of successes and their probabilities
distribution = data.frame(nrow )
bin_distribution = function(trials, prob) {
success = c(0:trials)
probability = rep(0, trials)
for (i in 1:trials) {
probability[i] = bin_probability(trials, i-1, prob)
}
cbind(success, probability)
}
bin_distribution(trials = 5, prob = 0.5)
#' @title Distribution
#' @description shows the probabilities of different numbers of successes
#' @param trials, prob
#' @return a data frame of numbers of successes and their probabilities
distribution = data.frame(nrow )
bin_distribution = function(trials, prob) {
success = c(0:trials)
probability = rep(0, trials)
for (i in 1:trials + 1) {
probability[i] = bin_probability(trials, i-1, prob)
}
cbind(success, probability)
}
bin_distribution(trials = 5, prob = 0.5)
#' @title Distribution
#' @description shows the probabilities of different numbers of successes
#' @param trials, prob
#' @return a data frame of numbers of successes and their probabilities
distribution = data.frame(nrow )
bin_distribution = function(trials, prob) {
success = c(0:trials)
probability = rep(0, trials)
for (i in 1:(trials + 1)) {
probability[i] = bin_probability(trials, i-1, prob)
}
cbind(success, probability)
}
bin_distribution(trials = 5, prob = 0.5)
?source
source('code/binomial-functions.R')
source('code/binomial-functions.R')
source('code/binomial-functions.R')
source('code/binomial-functions.R')
?bin_probability
bin_probability(trials = 10, success = 3, prob = 1/6)
bin_distribution(trials = 10, prob = 0.25)
bin_distribution(trials = 5, prob = 0.5)
bin_distribution(trials = 5, prob = 0.25)
bin_distribution(trials = 10, prob = 0.25)
loaded_six = bin_distribution(trials = 10, prob = 0.25)
?plot
plot(loaded_six[success], loaded_six[probability])
plot(loaded_six[1], loaded_six[probability])
plot(loaded_six[1], loaded_six[1])
plot(loaded_six[[1]], loaded_six[[1]])
plot(loaded_six)
for (i in 4:5) {
bin_probability(trials = 5, success = i, prob = 0.35)
}
for (i in 4:5) {
prob_head = bin_probability(trials = 5, success = i, prob = 0.35)
print(prob_head)
}
bin_probability(trials = 5, success = 4, prob = 0.35)
bin_probability(trials = 5, success = 5, prob = 0.35)
prob_head = 0
for (i in 4:5) {
prob_add = bin_probability(trials = 5, success = i, prob = 0.35)
prob_head = prob_head + prob_add
}
prob_head
loaded_head = bin_distribution(trials = 15, prob = 0.35)
plot(loaded_head)
loaded_head = bin_distribution(trials = 15, prob = 0.35)
plot(loaded_head)
sum = 0
for (i in 1:100) {
sum = sum + i
}
sum
x = c(1:100)
for (i in 1:length(x)) {
sum = sum + x[i]
}
avg = sum / length[i]
x = c(1:100)
for (i in 1:length(x)) {
sum = sum + x[i]
}
avg = sum / length(i)
avg
x = c(1:100)
for (i in 1:length(x)) {
sum = sum + x[i]
}
avg = sum / length(x)
avg
for (i in 1:length(x)) {
sum = sum + x[i]
}
sum
x = c(1:100)
for (i in 1:length(x)) {
sum = sum + x[i]
}
x
sum
x = c(1:100)
sum = 0
for (i in 1:length(x)) {
sum = sum + x[i]
}
avg = sum / length(x)
avg
x = c(1:00)
sum = 0
while (i <= length(x)) {
sum = sum + x[i]
i = i + 1
}
avg = sum / length(x)
avg
x = c(1:00)
sum = 0
i = 1
while (i <= length(x)) {
sum = sum + x[i]
i = i + 1
}
avg = sum / length(x)
avg
sum
x = c(1:00)
sum = 0
i = 1
while (i <= length(x)) {
sum = sum + x[i]
i = i + 1
}
sum
while (i <= length(x)) {
sum = sum + x[i]
i = i + 1
}
i
x = c(1:100)
sum = 0
i = 1
while (i <= length(x)) {
sum = sum + x[i]
i = i + 1
}
avg = sum / length(x)
avg
x = c(1:100)
sum = 0
i = 1
repeat {
sum = sum + x[i]
i = i + 1
if (i > length(x)) {
break
}
}
avg = sum / length(x)
avg
x = c(1:100)
sum = 0
avg = function(x) {
for (i in 1:length(x)) {
sum = sum + x[i]
}
}
x = c(1:100)
sum = 0
for (i in 1:length(x)) {
sum = sum + (x[i]-avg(x)) ^2
}
sum
x = c(1:100)
sum = 0
for (i in 1:length(x)) {
sum = sum + (x[i]-avg(x)) ^2
print(sum)
}
avg(x)
avg(x)
avg(x)
x = c(1:100)
sum = 0
avg = function(x) {
for (i in 1:length(x)) {
sum = sum + x[i]
}
return(sum)
}
avg(x)
sum = 0
avg(x)
# Average
x = c(1:100)
sum = 0
avg = function(x) {
for (i in 1:length(x)) {
sum = sum + x[i]
}
return(sum)
}
avg = sum / length(x)
avg
x = c(1:100)
sum = 0
for (i in 1:length(x)) {
sum = sum + x[i]
}
avg = sum / length(x)
avg
x = c(1:100)
sum = 0
for (i in 1:length(x)) {
sum = sum + (x[i] - mean(x)) ^ 2
}
sum
sd = sqrt(sum / (length(x) - 1))
sd
x = c(1:100)
sum = 0
i = 1
while (i <= length(x)) {
sum = sum + (x[i] - mean(x)) ^ 2
i = i + 1
}
sd = sqrt(sum / (length(x) - 1))
sd
x = c(1:100)
sum = 0
i = 1
repeat {
sum = sum + (x[i] - mean(x)) ^ 2
i = i + 1
if (i > length(x)) {
break
}
}
sd = sqrt(sum / (length(x) - 1))
sd
sd(1:100)
x = c(1:50)
product = 1
for (i in 1:length(x)) {
product = product * x[i]
}
x_bar = product ^ (1/length(x))
x_bar
x = c(1:50)
product = 1
while (i <= length(x)) {
product = product * x[i]
i = i + 1
}
x_bar = product ^ (1/length(x))
x_bar
product
x = c(1:50)
product = 1
while (i <= length(x)) {
product = product * x[i]
i = i + 1
}
x_bar = product ^ (1/length(x))
x_bar
x = c(1:50)
product = 1
i = 1
while (i <= length(x)) {
product = product * x[i]
i = i + 1
}
x_bar = product ^ (1/length(x))
x_bar
x = c(1:50)
product = 1
i = 1
repeat {
product = product * x[i]
i = i + 1
if (i > length(x)){
break
}
}
x_bar = product ^ (1/length(x))
x_bar
num_letters <- length(LETTERS)
set.seed(123)
values <- sample.int(num_letters)
distances <- values %*% t(values)
diag(distances) <- 0
dimnames(distances) <- list(LETTERS, LETTERS)
num_letters = length(LETTERS)
set.seed(123)
values = sample.int(num_letters)
distances = values %*% t(values)
diag(distances) = 0
dimnames(distances) = list(LETTERS, LETTERS)
distances
get_distances = function (distances, ltrs) {
sum = 0
for (i in 1:(length(ltrs) - 1)) {
sum = sum + distances[ltrs[i+1], ltrs[i]]
}
return(sum)
}
get_dist = function (distances, ltrs) {
sum = 0
for (i in 1:(length(ltrs) - 1)) {
sum = sum + distances[ltrs[i+1], ltrs[i]]
}
return(sum)
}
get_dist(distances, c('E', 'D', 'A'))
get_dist(distances, c('E', 'D', 'i'))
cal = c('C', 'A', 'L')
stats = c('S', 'T', 'A', 'T', 'S')
oski = c('O', 'S', 'K', 'I')
zzz = rep('Z', 3)
lets = LETTERS
lindsey = c('L', 'I', 'N', 'D', 'S', 'E', 'Y')
chung = c('C', 'H', 'U', 'N', 'G')
get_dist(distances, cal)
get_dist(distances, stats)
get_dist(distances, oski)
get_dist(distances, zzz)
get_dist(distances, lets)
get_dist(distances, lindsey)
get_dist(distances, chung)
strings_dist = rep(0, length(strings))
strings = list(
cal = cal,
stats = stats,
oski = oski,
zzz = zzz,
lets = lets,
first = first,
last = last
)
strings_dist
strings_dist = rep(0, length(strings))
for (i in 1:length(strings)) {
strings_dist[i] = get_dist(strings[i])
}
strings_dist = rep(0, length(strings))
for (i in 1:length(strings)) {
strings_dist[i] = get_dist(distances, strings[i])
}
strings_dist = list(
cal = 0,
stats = 0,
oski = 0,
zzz = 0,
lets = 0,
lindsey = 0,
chung = 0
)
for (i in 1:length(strings)) {
strings_dist[i] = get_dist(distances, strings[i])
}
strings = list(
cal = cal,
stats = stats,
oski = oski,
zzz = zzz,
lets = lets,
lindsey = lindsey,
chung = chung
)
strings_dist = list(
cal = 0,
stats = 0,
oski = 0,
zzz = 0,
lets = 0,
lindsey = 0,
chung = 0
)
for (i in 1:length(strings)) {
strings_dist[[i]] = get_dist(distances, strings[[i]])
}
strings_dist
